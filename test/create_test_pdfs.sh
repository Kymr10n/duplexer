#!/bin/bash
# Simplified PDF generator using LaTeX

set -euo pipefail

TEST_DIR="$(dirname "$0")"
OUTPUT_DIR="${TEST_DIR}/pdfs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

mkdir -p "$OUTPUT_DIR"

echo "üîß Generating test PDFs using LaTeX..."

# Function to create PDF using LaTeX
create_pdf_with_latex() {
    local filename="$1"
    local pages=("${@:2}")
    local basename_file=$(basename "$filename" .pdf)
    local tex_file="/tmp/${basename_file}.tex"

    cat > "$tex_file" << 'EOF'
\documentclass[12pt,letterpaper]{article}
\usepackage[margin=1in]{geometry}
\usepackage{fancyhdr}
\usepackage{graphicx}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[C]{Duplexer Test Document}
\fancyfoot[C]{\thepage}

\begin{document}
EOF

    for page_num in "${pages[@]}"; do
        cat >> "$tex_file" << EOF
\begin{center}
\vspace{3in}
{\Huge \textbf{Page $page_num}}\\\\
\vspace{1in}
{\Large Generated by Duplexer Test Suite}\\\\
\vspace{0.5in}
{\large Test Document - $(date)}\\\\
\vspace{0.5in}
{\normalsize This page represents page $page_num of an 8-page document.}\\\\
{\normalsize Testing automatic PDF duplex merging functionality.}
\end{center}
\clearpage
EOF
    done

    echo '\end{document}' >> "$tex_file"

    # Compile LaTeX to PDF
    echo "  üìÑ Compiling $(basename "$filename")..."
    local current_dir=$(pwd)
    cd /tmp
    pdflatex -interaction=nonstopmode "${basename_file}.tex" >/dev/null 2>&1

    if [[ -f "/tmp/${basename_file}.pdf" ]]; then
        mv "/tmp/${basename_file}.pdf" "$current_dir/$filename"
        echo "  ‚úÖ Created: $(basename "$filename")"
    else
        echo "  ‚ùå Failed to create: $(basename "$filename")"
        cd "$current_dir"
        return 1
    fi

    # Clean up LaTeX auxiliary files
    rm -f "/tmp/${basename_file}."*
    cd "$current_dir"
}

# Generate test PDFs
echo "üìÑ Creating odd pages PDF (pages 1, 3, 5, 7)..."
ODD_PDF="$OUTPUT_DIR/test_odd_pages_${TIMESTAMP}.pdf"
create_pdf_with_latex "$ODD_PDF" 1 3 5 7

echo "üìÑ Creating even pages PDF (pages 8, 6, 4, 2)..."
EVEN_PDF="$OUTPUT_DIR/test_even_pages_${TIMESTAMP}.pdf"
create_pdf_with_latex "$EVEN_PDF" 8 6 4 2

# Verify the PDFs
if [[ -f "$ODD_PDF" && -f "$EVEN_PDF" ]]; then
    echo ""
    echo "‚úÖ Test PDFs created successfully!"
    echo "   üìÑ Odd pages:  $(basename "$ODD_PDF")"
    echo "   üìÑ Even pages: $(basename "$EVEN_PDF")"
    echo ""
    echo "File details:"
    ls -lh "$ODD_PDF" "$EVEN_PDF"

    # Test PDF validity with pdftk if available
    if command -v pdftk >/dev/null; then
        echo ""
        echo "üîç Validating PDFs with pdftk..."
        for pdf in "$ODD_PDF" "$EVEN_PDF"; do
            if pdftk "$pdf" dump_data >/dev/null 2>&1; then
                pages=$(pdftk "$pdf" dump_data | grep NumberOfPages | awk '{print $2}')
                echo "  ‚úÖ $(basename "$pdf"): Valid PDF with $pages pages"
            else
                echo "  ‚ùå $(basename "$pdf"): Invalid PDF"
            fi
        done
    fi

    echo ""
    echo "üéØ Ready for end-to-end testing!"
    echo "Files are ready to upload to your NAS inbox."

    # Export file paths for use in next step
    echo "export TEST_ODD_PDF='$ODD_PDF'" > "$OUTPUT_DIR/test_vars.sh"
    echo "export TEST_EVEN_PDF='$EVEN_PDF'" >> "$OUTPUT_DIR/test_vars.sh"
    echo "export TEST_TIMESTAMP='$TIMESTAMP'" >> "$OUTPUT_DIR/test_vars.sh"

else
    echo "‚ùå Failed to create test PDFs"
    exit 1
fi
