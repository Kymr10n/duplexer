#!/bin/bash
# Test PDF generator for Duplexer end-to-end testing

set -euo pipefail

# Configuration
TEST_DIR="$(dirname "$0")"
OUTPUT_DIR="${TEST_DIR}/pdfs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Create output directory
mkdir -p "$OUTPUT_DIR"

echo "🔧 Generating test PDFs for Duplexer..."

# Function to create a simple PDF with page content
create_test_pdf() {
    local filename="$1"
    local pages=("${@:2}")
    local temp_ps="/tmp/temp_${TIMESTAMP}.ps"

    # Create PostScript content
    cat > "$temp_ps" << 'EOF'
%!PS-Adobe-3.0
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
EOF

    local page_count=0
    for page_num in "${pages[@]}"; do
        ((page_count++))
        cat >> "$temp_ps" << EOF
%%Page: $page_count $page_count
%%BeginPageSetup
<<
/PageSize [612 792]
>> setpagedevice
%%EndPageSetup
newpath
/Arial findfont 72 scalefont setfont
306 400 moveto
(Page $page_num) dup stringwidth pop 2 div neg 0 rmoveto show

/Arial findfont 24 scalefont setfont
306 300 moveto
(Generated by Duplexer Test Suite) dup stringwidth pop 2 div neg 0 rmoveto show

/Arial findfont 18 scalefont setfont
306 250 moveto
(Test Document - $(date)) dup stringwidth pop 2 div neg 0 rmoveto show

% Add a simple border
0 0 612 792 rectstroke

showpage
EOF
    done

    echo "%%Trailer" >> "$temp_ps"
    echo "%%Pages: $page_count" >> "$temp_ps"
    echo "%%EOF" >> "$temp_ps"

    # Convert PS to PDF using ps2pdf (part of ghostscript)
    if command -v ps2pdf >/dev/null; then
        ps2pdf "$temp_ps" "$filename"
    else
        echo "⚠️  ps2pdf not found, trying alternative method..."
        # Alternative: create using echo and convert to PDF via another method
        create_simple_pdf_alternative "$filename" "${pages[@]}"
    fi

    # Clean up
    rm -f "$temp_ps"
}

# Alternative PDF creation method using LaTeX if available
create_simple_pdf_alternative() {
    local filename="$1"
    local pages=("${@:2}")

    # Check if pdflatex is available
    if command -v pdflatex >/dev/null; then
        create_latex_pdf "$filename" "${pages[@]}"
    else
        # Fallback: create using pdftk with blank pages
        create_minimal_pdf "$filename" "${pages[@]}"
    fi
}

# Create PDF using LaTeX
create_latex_pdf() {
    local filename="$1"
    local pages=("${@:2}")
    local tex_file="/tmp/test_${TIMESTAMP}.tex"

    cat > "$tex_file" << 'EOF'
\documentclass[12pt]{article}
\usepackage[margin=1in]{geometry}
\usepackage{fancyhdr}
\pagestyle{fancy}
\begin{document}
EOF

    for page_num in "${pages[@]}"; do
        cat >> "$tex_file" << EOF
\begin{center}
\vspace{2in}
{\Huge Page $page_num}\\
\vspace{1in}
{\large Generated by Duplexer Test Suite}\\
\vspace{0.5in}
{\normalsize Test Document - $(date)}
\end{center}
\newpage
EOF
    done

    echo '\end{document}' >> "$tex_file"

    # Compile to PDF
    cd /tmp
    pdflatex -interaction=nonstopmode "$(basename "$tex_file")" >/dev/null 2>&1
    mv "/tmp/$(basename "$tex_file" .tex).pdf" "$filename"

    # Clean up
    rm -f "/tmp/$(basename "$tex_file" .tex)."*
}

# Minimal PDF creation using basic tools
create_minimal_pdf() {
    local filename="$1"
    local pages=("${@:2}")

    echo "📄 Creating minimal test PDF: $filename"

    # Create a simple text representation and convert if possible
    local text_file="/tmp/test_content_${TIMESTAMP}.txt"

    for page_num in "${pages[@]}"; do
        cat >> "$text_file" << EOF



                    PAGE $page_num

        Generated by Duplexer Test Suite
            Test Document - $(date)

        This is a test page for validating
        the Duplexer PDF merging functionality.

        Page Number: $page_num





EOF
        # Add form feed for page break
        echo -e "\f" >> "$text_file"
    done

    # Try to convert text to PDF using various methods
    if command -v enscript >/dev/null && command -v ps2pdf >/dev/null; then
        enscript -p "/tmp/temp_${TIMESTAMP}.ps" "$text_file" 2>/dev/null
        ps2pdf "/tmp/temp_${TIMESTAMP}.ps" "$filename"
        rm -f "/tmp/temp_${TIMESTAMP}.ps"
    elif command -v a2ps >/dev/null && command -v ps2pdf >/dev/null; then
        a2ps -o "/tmp/temp_${TIMESTAMP}.ps" "$text_file" 2>/dev/null
        ps2pdf "/tmp/temp_${TIMESTAMP}.ps" "$filename"
        rm -f "/tmp/temp_${TIMESTAMP}.ps"
    else
        echo "⚠️  No PDF creation tools available. Creating placeholder file."
        # Create a basic "PDF" file that pdftk can work with
        cat > "$filename" << 'EOF'
%PDF-1.4
1 0 obj
<< /Type /Catalog /Pages 2 0 R >>
endobj
2 0 obj
<< /Type /Pages /Kids [3 0 R] /Count 1 >>
endobj
3 0 obj
<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] >>
endobj
xref
0 4
0000000000 65535 f
0000000010 00000 n
0000000053 00000 n
0000000100 00000 n
trailer
<< /Size 4 /Root 1 0 R >>
startxref
165
%%EOF
EOF
    fi

    rm -f "$text_file"
}

# Check dependencies
echo "🔍 Checking PDF creation tools..."
if command -v ps2pdf >/dev/null; then
    echo "✅ ps2pdf found"
    PDF_METHOD="ps2pdf"
elif command -v pdflatex >/dev/null; then
    echo "✅ pdflatex found"
    PDF_METHOD="latex"
else
    echo "⚠️  Limited PDF tools available, will create basic files"
    PDF_METHOD="basic"
fi

# Generate odd pages PDF (pages 1, 3, 5, 7)
echo "📄 Creating odd pages PDF..."
ODD_PDF="$OUTPUT_DIR/test_odd_pages_${TIMESTAMP}.pdf"
create_test_pdf "$ODD_PDF" 1 3 5 7

# Generate even pages PDF (pages 8, 6, 4, 2 - in scanning order)
echo "📄 Creating even pages PDF..."
EVEN_PDF="$OUTPUT_DIR/test_even_pages_${TIMESTAMP}.pdf"
create_test_pdf "$EVEN_PDF" 8 6 4 2

# Verify PDFs were created
if [[ -f "$ODD_PDF" && -f "$EVEN_PDF" ]]; then
    echo "✅ Test PDFs created successfully:"
    echo "   📄 Odd pages:  $ODD_PDF"
    echo "   📄 Even pages: $EVEN_PDF"
    echo ""
    echo "File sizes:"
    ls -lh "$ODD_PDF" "$EVEN_PDF"
    echo ""
    echo "🎯 Ready for testing! Use these files to test Duplexer:"
    echo "   1. Copy both files to your NAS inbox: /volume1/services/duplexer/inbox/"
    echo "   2. Watch the logs: make logs"
    echo "   3. Check output in: /volume1/services/paperless/consume/"
else
    echo "❌ Failed to create test PDFs"
    exit 1
fi

# Create test instructions
cat > "$OUTPUT_DIR/test_instructions.txt" << EOF
Duplexer End-to-End Test Instructions
====================================

Generated: $(date)

Test Files:
- Odd pages:  $(basename "$ODD_PDF")
- Even pages: $(basename "$EVEN_PDF")

Expected Result:
When both files are processed, the merged PDF should contain pages in order:
1, 2, 3, 4, 5, 6, 7, 8

Test Steps:
1. Copy both PDF files to NAS inbox: /volume1/services/duplexer/inbox/
2. Monitor processing: make logs
3. Check merged output in: /volume1/services/paperless/consume/
4. Verify page order in merged PDF

Validation:
- Merged file should be named: duplex_YYYYMMDD_HHMMSS.pdf
- Pages should be in correct sequence: 1→2→3→4→5→6→7→8
- Original files should be removed from inbox
- Backup copies should be in: /volume1/services/duplexer/logs/backup/
EOF

echo "📋 Test instructions saved to: $OUTPUT_DIR/test_instructions.txt"
